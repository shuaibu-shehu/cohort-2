/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const path = require('path')
  const fsPromises=require('fs').promises;
  const fs=require('fs');
const { log } = require('console');
  
  const app = express();
  app.use(bodyParser.json());
  const port=3000
  const dir=path.join(__dirname,'todosfile');
  // let todos=[{id:1,title:"buy groceries", completed:true, descriptoin:"I shoiuld buy groceries"}]

  app.get('/todos',async (req,res)=>{ 
    let todos=[]
        
            try {
              const files = await fsPromises.readdir(dir)
              for (let i = 0; i < files.length; i++) {
                const data= await fsPromises.readFile(path.join(dir,files[i]),'utf-8',)
                todos.push(JSON.parse(data)) 
              }
            } catch (error) {
              console.error(error);
              res.status(500).send('Internal Server Error');
            }
     
       console.log(todos);
        res.json(todos)
    })
    
  app.post('/todos', async (req,res)=>{
    
    try {
      const files = await fsPromises.readdir(dir)
      let todo=req.body;
      todo={...todo, id:files.length+1}
      console.log(todo);
      const filePath=path.join(dir,`${todo.id}.txt`);
      await  fsPromises.appendFile(filePath,JSON.stringify(todo))
      console.log(dir);
       } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
        return;
       }
       
       res.json({})  
  })
  
  app.put('/todos',async (req,res)=>{
    const {id, updateCompleted }=req.body;
    const filePath=path.join(dir,`${id}.txt`);
    console.log(id);
    let data=JSON.parse(await fsPromises.readFile(filePath,'utf-8'))
   data={...data,completed:updateCompleted}
    console.log(data);
    fs.writeFileSync(filePath,JSON.stringify(data))
    res.json({})
  }) 

  app.delete('/todos', async (req, res) => {
    console.log(req.body.id);
    try {
        const { id } = req.body;
        const filePath = path.join(dir, `${id}.txt`);
        console.log(filePath);
        await fsPromises.unlink(filePath);
        res.json({ done: `Successfully removed the file ${id}.txt` });
    } catch (error) {
        console.error(error);
        res.status(404).json({ error: 'File not found' });
    }
});

  app.listen(port,()=>{
      console.log(`running on http://localhost:${port}`)
  })
  module.exports = app;  